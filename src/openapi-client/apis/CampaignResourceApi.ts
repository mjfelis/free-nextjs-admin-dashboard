/* tslint:disable */
/* eslint-disable */
/**
 * orchestrator-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CampaignFilter,
  CampaignVO,
} from '../models/index';
import {
    CampaignFilterFromJSON,
    CampaignFilterToJSON,
    CampaignVOFromJSON,
    CampaignVOToJSON,
} from '../models/index';

export interface CampaignCloneIdCloneIdPutRequest {
    cloneId: string;
    id: string;
}

export interface CampaignGetIdGetRequest {
    id: string;
}

export interface CampaignKpisIdPostRequest {
    id: string;
}

export interface CampaignListPostRequest {
    campaignFilter?: CampaignFilter;
}

export interface CampaignSavePostRequest {
    campaignVO?: CampaignVO;
}

/**
 * 
 */
export class CampaignResourceApi extends runtime.BaseAPI {

    /**
     * Clone and return a Campaign
     * Clone and return a Campaign
     */
    async campaignCloneIdCloneIdPutRaw(requestParameters: CampaignCloneIdCloneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cloneId'] == null) {
            throw new runtime.RequiredError(
                'cloneId',
                'Required parameter "cloneId" was null or undefined when calling campaignCloneIdCloneIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignCloneIdCloneIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/campaign/clone/{id}/{cloneId}`.replace(`{${"cloneId"}}`, encodeURIComponent(String(requestParameters['cloneId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Clone and return a Campaign
     * Clone and return a Campaign
     */
    async campaignCloneIdCloneIdPut(requestParameters: CampaignCloneIdCloneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignCloneIdCloneIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of existing campaign filters.
     * Get Campaign filters
     */
    async campaignFiltersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/campaign/filters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a list of existing campaign filters.
     * Get Campaign filters
     */
    async campaignFiltersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignFiltersGetRaw(initOverrides);
    }

    /**
     * Get a Campaign with its id.
     * Get a Campaign
     */
    async campaignGetIdGetRaw(requestParameters: CampaignGetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignGetIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/campaign/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a Campaign with its id.
     * Get a Campaign
     */
    async campaignGetIdGet(requestParameters: CampaignGetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignGetIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * List available KPIs for this Campaign
     * List Campaign KPIs
     */
    async campaignKpisIdPostRaw(requestParameters: CampaignKpisIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignKpisIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/campaign/kpis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List available KPIs for this Campaign
     * List Campaign KPIs
     */
    async campaignKpisIdPost(requestParameters: CampaignKpisIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignKpisIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * List Campaigns, with an optional filter
     * List Campaigns
     */
    async campaignListPostRaw(requestParameters: CampaignListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/campaign/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignFilterToJSON(requestParameters['campaignFilter']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List Campaigns, with an optional filter
     * List Campaigns
     */
    async campaignListPost(requestParameters: CampaignListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignListPostRaw(requestParameters, initOverrides);
    }

    /**
     * Save or update a Campaign.
     * Save or update a Campaign
     */
    async campaignSavePostRaw(requestParameters: CampaignSavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/campaign/save`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignVOToJSON(requestParameters['campaignVO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Save or update a Campaign.
     * Save or update a Campaign
     */
    async campaignSavePost(requestParameters: CampaignSavePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignSavePostRaw(requestParameters, initOverrides);
    }

}
