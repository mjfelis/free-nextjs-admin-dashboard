/* tslint:disable */
/* eslint-disable */
/**
 * orchestrator-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ParameterFilter,
  ParameterVO,
} from '../models/index';
import {
    ParameterFilterFromJSON,
    ParameterFilterToJSON,
    ParameterVOFromJSON,
    ParameterVOToJSON,
} from '../models/index';

export interface ParameterGetNameGetRequest {
    name: string;
}

export interface ParameterSavePostRequest {
    parameterVO?: ParameterVO;
}

export interface ParameterSavemanyPostRequest {
    parameterVO?: Array<ParameterVO>;
}

export interface ParametersPostRequest {
    parameterFilter?: ParameterFilter;
}

/**
 * 
 */
export class ParameterResourceApi extends runtime.BaseAPI {

    /**
     * Get a Parameter with its name name.
     * Get a Parameter with its name
     */
    async parameterGetNameGetRaw(requestParameters: ParameterGetNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling parameterGetNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/parameter/get/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a Parameter with its name name.
     * Get a Parameter with its name
     */
    async parameterGetNameGet(requestParameters: ParameterGetNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.parameterGetNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create or update a Parameter
     * Save a Parameter
     */
    async parameterSavePostRaw(requestParameters: ParameterSavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/parameter/save`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParameterVOToJSON(requestParameters['parameterVO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update a Parameter
     * Save a Parameter
     */
    async parameterSavePost(requestParameters: ParameterSavePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.parameterSavePostRaw(requestParameters, initOverrides);
    }

    /**
     * Create or update a list of Parameters
     * Save a list of Parameters
     */
    async parameterSavemanyPostRaw(requestParameters: ParameterSavemanyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/parameter/savemany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['parameterVO']!.map(ParameterVOToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update a list of Parameters
     * Save a list of Parameters
     */
    async parameterSavemanyPost(requestParameters: ParameterSavemanyPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.parameterSavemanyPostRaw(requestParameters, initOverrides);
    }

    /**
     * List Parameter Types
     * List Parameter Types
     */
    async parameterTypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/parameterTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List Parameter Types
     * List Parameter Types
     */
    async parameterTypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.parameterTypesGetRaw(initOverrides);
    }

    /**
     * List Parameters, with an optional filter.
     * List Parameters
     */
    async parametersPostRaw(requestParameters: ParametersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/parameters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParameterFilterToJSON(requestParameters['parameterFilter']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List Parameters, with an optional filter.
     * List Parameters
     */
    async parametersPost(requestParameters: ParametersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.parametersPostRaw(requestParameters, initOverrides);
    }

}
