/* tslint:disable */
/* eslint-disable */
/**
 * orchestrator-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityState,
  EntityType,
} from '../models/index';
import {
    EntityStateFromJSON,
    EntityStateToJSON,
    EntityTypeFromJSON,
    EntityTypeToJSON,
} from '../models/index';

export interface GenericHistoryEntityTypeIdPostRequest {
    entityType: EntityType;
    id: string;
}

export interface GenericStateEntityTypeIdNewStatePutRequest {
    entityType: EntityType;
    id: string;
    newState: EntityState;
}

export interface GenericStatusEntityTypeIdVerboseGetRequest {
    entityType: EntityType;
    id: string;
    verbose: boolean;
}

/**
 * 
 */
export class GenericEntityResourceApi extends runtime.BaseAPI {

    /**
     * Return the modification history of Entity id of type entityType.
     * Get Entity modification history
     */
    async genericHistoryEntityTypeIdPostRaw(requestParameters: GenericHistoryEntityTypeIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityType'] == null) {
            throw new runtime.RequiredError(
                'entityType',
                'Required parameter "entityType" was null or undefined when calling genericHistoryEntityTypeIdPost().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling genericHistoryEntityTypeIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/generic/history/{entityType}/{id}`.replace(`{${"entityType"}}`, encodeURIComponent(String(requestParameters['entityType']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Return the modification history of Entity id of type entityType.
     * Get Entity modification history
     */
    async genericHistoryEntityTypeIdPost(requestParameters: GenericHistoryEntityTypeIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.genericHistoryEntityTypeIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Change state of an Entity id of type entityType to a new state newState.
     * Change state of an Entity
     */
    async genericStateEntityTypeIdNewStatePutRaw(requestParameters: GenericStateEntityTypeIdNewStatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityType'] == null) {
            throw new runtime.RequiredError(
                'entityType',
                'Required parameter "entityType" was null or undefined when calling genericStateEntityTypeIdNewStatePut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling genericStateEntityTypeIdNewStatePut().'
            );
        }

        if (requestParameters['newState'] == null) {
            throw new runtime.RequiredError(
                'newState',
                'Required parameter "newState" was null or undefined when calling genericStateEntityTypeIdNewStatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/generic/state/{entityType}/{id}/{newState}`.replace(`{${"entityType"}}`, encodeURIComponent(String(requestParameters['entityType']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"newState"}}`, encodeURIComponent(String(requestParameters['newState']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change state of an Entity id of type entityType to a new state newState.
     * Change state of an Entity
     */
    async genericStateEntityTypeIdNewStatePut(requestParameters: GenericStateEntityTypeIdNewStatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.genericStateEntityTypeIdNewStatePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async genericStatusEntityTypeIdVerboseGetRaw(requestParameters: GenericStatusEntityTypeIdVerboseGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityType'] == null) {
            throw new runtime.RequiredError(
                'entityType',
                'Required parameter "entityType" was null or undefined when calling genericStatusEntityTypeIdVerboseGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling genericStatusEntityTypeIdVerboseGet().'
            );
        }

        if (requestParameters['verbose'] == null) {
            throw new runtime.RequiredError(
                'verbose',
                'Required parameter "verbose" was null or undefined when calling genericStatusEntityTypeIdVerboseGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/generic/status/{entityType}/{id}/{verbose}`.replace(`{${"entityType"}}`, encodeURIComponent(String(requestParameters['entityType']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"verbose"}}`, encodeURIComponent(String(requestParameters['verbose']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async genericStatusEntityTypeIdVerboseGet(requestParameters: GenericStatusEntityTypeIdVerboseGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.genericStatusEntityTypeIdVerboseGetRaw(requestParameters, initOverrides);
    }

}
