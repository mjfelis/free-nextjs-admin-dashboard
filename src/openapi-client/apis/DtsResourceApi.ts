/* tslint:disable */
/* eslint-disable */
/**
 * orchestrator-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DtsFilter,
  DtsVO,
  ErrorResponse,
} from '../models/index';
import {
    DtsFilterFromJSON,
    DtsFilterToJSON,
    DtsVOFromJSON,
    DtsVOToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface DtsCloneIdCloneIdPutRequest {
    cloneId: string;
    id: string;
}

export interface DtsGetIdDeploymentGetRequest {
    id: string;
}

export interface DtsGetIdGetRequest {
    id: string;
}

export interface DtsListPostRequest {
    dtsFilter?: DtsFilter;
}

export interface DtsSavePostRequest {
    dtsVO?: DtsVO;
}

/**
 * 
 */
export class DtsResourceApi extends runtime.BaseAPI {

    /**
     * Clone and return a DTS
     * Clone and return a DTS
     */
    async dtsCloneIdCloneIdPutRaw(requestParameters: DtsCloneIdCloneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cloneId'] == null) {
            throw new runtime.RequiredError(
                'cloneId',
                'Required parameter "cloneId" was null or undefined when calling dtsCloneIdCloneIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dtsCloneIdCloneIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dts/clone/{id}/{cloneId}`.replace(`{${"cloneId"}}`, encodeURIComponent(String(requestParameters['cloneId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Clone and return a DTS
     * Clone and return a DTS
     */
    async dtsCloneIdCloneIdPut(requestParameters: DtsCloneIdCloneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dtsCloneIdCloneIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Get DTS deployment descriptors
     * Get DTS deployment descriptors
     */
    async dtsGetIdDeploymentGetRaw(requestParameters: DtsGetIdDeploymentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dtsGetIdDeploymentGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dts/get/{id}/deployment`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get DTS deployment descriptors
     * Get DTS deployment descriptors
     */
    async dtsGetIdDeploymentGet(requestParameters: DtsGetIdDeploymentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dtsGetIdDeploymentGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get DTS
     * Get DTS
     */
    async dtsGetIdGetRaw(requestParameters: DtsGetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtsVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dtsGetIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dts/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtsVOFromJSON(jsonValue));
    }

    /**
     * Get DTS
     * Get DTS
     */
    async dtsGetIdGet(requestParameters: DtsGetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtsVO> {
        const response = await this.dtsGetIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List DTSs
     * List DTSs
     */
    async dtsListPostRaw(requestParameters: DtsListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DtsVO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dts/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtsFilterToJSON(requestParameters['dtsFilter']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DtsVOFromJSON));
    }

    /**
     * List DTSs
     * List DTSs
     */
    async dtsListPost(requestParameters: DtsListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DtsVO>> {
        const response = await this.dtsListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update DTS
     * Create or update DTS
     */
    async dtsSavePostRaw(requestParameters: DtsSavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dts/save`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtsVOToJSON(requestParameters['dtsVO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update DTS
     * Create or update DTS
     */
    async dtsSavePost(requestParameters: DtsSavePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dtsSavePostRaw(requestParameters, initOverrides);
    }

}
