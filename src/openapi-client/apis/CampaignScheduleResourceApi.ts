/* tslint:disable */
/* eslint-disable */
/**
 * orchestrator-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CampaignScheduleFilter,
  CampaignScheduleVO,
} from '../models/index';
import {
    CampaignScheduleFilterFromJSON,
    CampaignScheduleFilterToJSON,
    CampaignScheduleVOFromJSON,
    CampaignScheduleVOToJSON,
} from '../models/index';

export interface ScheduleDeleteIdDeleteRequest {
    id: string;
}

export interface ScheduleDtsIdEnabledGetRequest {
    enabled: boolean;
    id: string;
}

export interface ScheduleGetIdGetRequest {
    id: string;
}

export interface ScheduleListPostRequest {
    campaignScheduleFilter?: CampaignScheduleFilter;
}

export interface ScheduleSavePostRequest {
    campaignScheduleVO?: CampaignScheduleVO;
}

export interface ScheduleUndeleteIdPatchRequest {
    id: string;
}

/**
 * 
 */
export class CampaignScheduleResourceApi extends runtime.BaseAPI {

    /**
     * Delete a Schedule with its id.
     * Delete a Schedule
     */
    async scheduleDeleteIdDeleteRaw(requestParameters: ScheduleDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scheduleDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedule/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Schedule with its id.
     * Delete a Schedule
     */
    async scheduleDeleteIdDelete(requestParameters: ScheduleDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleDeleteIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List Enabled Schedules, for a specific DTS.
     * List Enabled Schedules, for a specific DTS
     */
    async scheduleDtsIdEnabledGetRaw(requestParameters: ScheduleDtsIdEnabledGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['enabled'] == null) {
            throw new runtime.RequiredError(
                'enabled',
                'Required parameter "enabled" was null or undefined when calling scheduleDtsIdEnabledGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scheduleDtsIdEnabledGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedule/dts/{id}/{enabled}`.replace(`{${"enabled"}}`, encodeURIComponent(String(requestParameters['enabled']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List Enabled Schedules, for a specific DTS.
     * List Enabled Schedules, for a specific DTS
     */
    async scheduleDtsIdEnabledGet(requestParameters: ScheduleDtsIdEnabledGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleDtsIdEnabledGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get a Schedule with its id.
     * Get a Schedule
     */
    async scheduleGetIdGetRaw(requestParameters: ScheduleGetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scheduleGetIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedule/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a Schedule with its id.
     * Get a Schedule
     */
    async scheduleGetIdGet(requestParameters: ScheduleGetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleGetIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * List Schedules.
     * List Schedules
     */
    async scheduleListPostRaw(requestParameters: ScheduleListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schedule/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignScheduleFilterToJSON(requestParameters['campaignScheduleFilter']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List Schedules.
     * List Schedules
     */
    async scheduleListPost(requestParameters: ScheduleListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleListPostRaw(requestParameters, initOverrides);
    }

    /**
     * Save a Schedule with its id.
     * Save a Schedule
     */
    async scheduleSavePostRaw(requestParameters: ScheduleSavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schedule/save`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignScheduleVOToJSON(requestParameters['campaignScheduleVO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Save a Schedule with its id.
     * Save a Schedule
     */
    async scheduleSavePost(requestParameters: ScheduleSavePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleSavePostRaw(requestParameters, initOverrides);
    }

    /**
     * Undelete a Schedule with its id.
     * Undelete a Schedule
     */
    async scheduleUndeleteIdPatchRaw(requestParameters: ScheduleUndeleteIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scheduleUndeleteIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedule/undelete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Undelete a Schedule with its id.
     * Undelete a Schedule
     */
    async scheduleUndeleteIdPatch(requestParameters: ScheduleUndeleteIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleUndeleteIdPatchRaw(requestParameters, initOverrides);
    }

}
